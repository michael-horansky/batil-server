[
  {
    "CHAPTER_ID": 1,
    "LABEL": "Welcome",
    "CONTENT": "<p>Welcome to Batil (BAttle in TIme Loops)!</p>\r\n\r\n<p>TL;DR: If you just want to start playing right away, head over to the _URL_auth.register_sign-up page_ to make an account, then log in and start playing! _URLKW2_home.index<section=5,tutorial_guide_chapter=26>_Here_ is a list of all tutorials to quickly teach you how to play.</p>\r\n\r\n<p>This guide is divided into two parts. The first will teach you how to navigate the Batil website and how to start playing the game right away. The second is a complete rulebook for Batil, including example scenarios which you can explore in-game by clicking on the interactive links inside the tutorial text.</p>\r\n\r\n<p>If you're reading this, the first 'beta' version of the game has been deployed to a live server. Please keep track of any issues, wanted features, unwanted bugs, unclear explanations, or comments regarding the rules of the game that you might have and send them to me either via this _URLEXT_<https://forms.gle/yvaYjF7mAqE5y4vK9>_feedback submission form_ or via my e-mail address michael.horansky@gmail.com. If you won't, I will send you unsolicited emails on the address you provided during registration, where I will spam you with tedious multi-page feedback forms. Thank you for being a cooperating test subject.</p>\r\n\r\n<p>Enjoy the game!</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": 2,
    "PARENT_CHAPTER": null,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 2,
    "LABEL": "Navigating the Batil web app",
    "CONTENT": "<p>The Batil web-app is an open-source software package for hosting instances of Batil, a turn-based player-vs-player strategy game (or a \"chesslike\", if you will). The web-app source-code may be found on _URLEXT_<https://github.com/michael-horansky/batil-server>_this repository_. You are welcome to modify and reuse this software to host your own Batil (or Batil-derived) game servers!</p>\r\n\r\n<p>\r\nThe Batil web-app has five different page types which comprise its core features:\r\n</p>\r\n<ul>\r\n\r\n<li>_URL_auth.register_Sign-up_ and _URL_auth.login_log-in_: pages to make an account and to log in after closing and reopening the client.</li>\r\n<li>_URL_home.index_Home_: The home view of Batil after you log in; here you can begin new games and open ongoing ones, browse boards and users, manage your friend-list and change your account settings.</li>\r\n<li>_URLKW_user.user<username=batil>_User_: to view a particular user account. This link, for example, will display the official admin account for this instance of Batil!</li>\r\n<li>Game: the main interface for a single game of Batil. There is also the Tutorial interface, which looks very similar.</li>\r\n<li>_URLKW_board.board<board_id=1>_Board_: the interface to view (and edit) boards. This link, for example, will take you to one of the default boards Batil comes with!</li>\r\n<li>The secret sixth _URL_admin.admin_admin_ page</li>\r\n\r\n</ul>\r\n<p>\r\nEach of these is introduced in the sub-chapters of this chapter.\r\n</p>",
    "NEXT_CHAPTER": 3,
    "FIRST_SUBCHAPTER": 4,
    "PARENT_CHAPTER": 1,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 3,
    "LABEL": "Rules of the game",
    "CONTENT": "<p>\r\nThis section will teach you how to play Batil itself, including links to helpful tutorials (i.e. annotated example games).\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": 22,
    "PARENT_CHAPTER": 1,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 4,
    "LABEL": "Sign-up and Log-in",
    "CONTENT": "<p>To register a new account, you need to choose a unique username (only alphanumeric characters please), a password (which is NOT stored in the database, as it is hashed) and an e-mail address. The e-mail address is currently entirely optional, since no e-mail verification is required to activate your account. This will probably change post-beta.<p>\r\n\r\n<p>Note that logging in stores a cookie on your computer to preserve your session. We don't have a fancy bar on the bottom, and thus opening this website anywhere in Europe is highly illegal.</p>",
    "NEXT_CHAPTER": 5,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 2,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 5,
    "LABEL": "Home",
    "CONTENT": "The Home page is always handy, as it allows you to manage your ongoing and archived games, create and edit new boards, browse existing boards and users, and edit your account settings.",
    "NEXT_CHAPTER": 6,
    "FIRST_SUBCHAPTER": 9,
    "PARENT_CHAPTER": 2,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 6,
    "LABEL": "User interface",
    "CONTENT": "<p>\r\nThis is the page to view a user profile. It can be accessed regardless of whether you're logged in or not. It features the following tabs:\r\n</p>\r\n\r\n<ol>\r\n\r\n<li>\r\n<mark>Stats</mark>: The general stats for the user profile, such as their rating, the number of games they played, the number of boards they published etc. If you're logged in, this tab also allows you to send the user a friend request or block them.\r\n</li>\r\n\r\n<li>\r\n<mark>Archive</mark>: An archive of all the games this user has finished, colour-coded by outcome from their perspective.\r\n</li>\r\n\r\n<li>\r\n<mark>Boards</mark>: A table of all the boards this user has published, displaying the number of games played on them and their measured handicap.\r\n</li>\r\n\r\n<li>\r\n<mark>Friends</mark>: The user's friend-list.\r\n</li>\r\n\r\n<li>\r\n<mark>Games with you</mark>: If logged in, this tab displays an archive of all the concluded gamees you played with this user, colour-coded by outcome from their perspective.\r\n</li>\r\n\r\n</ol>",
    "NEXT_CHAPTER": 7,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 2,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 7,
    "LABEL": "Game interface",
    "CONTENT": "<p>\r\nThis page displays a specific game. The GUI is divided into three sections:\r\n</p>\r\n\r\n<ul>\r\n\r\n<li>\r\nThe <mark>board</mark>, consisting of board tiles rendered against a black background.\r\n</li>\r\n\r\n<li>\r\nThe <mark>inspectors</mark>, three forms on the right side of the window. These are the stone inspector, the tracking inspector, and the square inspector, in order from top to bottom.\r\n</li>\r\n\r\n<li>\r\nThe <mark>action bar</mark> on the bottom of the window, which allows interacting with the game, and which features three sections left to right: the control panel, the game log, and the management section.\r\n</li>\r\n\r\n</ul>\r\n\r\n<p>\r\nThe game interface features many navigation options, which are all bound to keyboard actions. The following is an exhaustive list of all keyboard actions for the game interface:\r\n</p>\r\n\r\n<ul>\r\n<li><mark>W</mark>: move camera up</li>\r\n<li><mark>A</mark>: move camera left</li>\r\n<li><mark>S</mark>: move camera down</li>\r\n<li><mark>D</mark>: move camera right</li>\r\n<li><mark>Q</mark>: zoom camera in</li>\r\n<li><mark>E</mark>: zoom camera out</li>\r\n<li><mark>R</mark>: reset camera to a full-board view</li>\r\n<li><mark>F</mark>: reset camera to the standard zoom level</li>\r\n<li><mark>Z</mark>: display previous time-slice</li>\r\n<li><mark>X</mark>: display active time-slice</li>\r\n<li><mark>C</mark>: display next time-slice</li>\r\n<li><mark>Left arrow</mark>: display previous round</li>\r\n<li><mark>Right arrow</mark>: display next round</li>\r\n<li><mark>Up arrow</mark>: display latest round</li>\r\n<li><mark>Escape</mark>: If tracking a stone, exit stone tracking; otherwise, unselect square.</li>\r\n</ul>\r\n\r\n<p>\r\nFurthermore, if selection mode is active, the following keyboard actions take precedence:\r\n</p>\r\n\r\n<ul>\r\n<li><mark>Arrow keys</mark>: select target azimuth</li>\r\n<li><mark>Escape</mark>: abort selection mode</li>\r\n<li><mark>Enter</mark>: submit selection</li>\r\n</ul>",
    "NEXT_CHAPTER": 8,
    "FIRST_SUBCHAPTER": 14,
    "PARENT_CHAPTER": 2,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 8,
    "LABEL": "Board interface",
    "CONTENT": "<p>\r\nThe board interface is very similar to the game interface, with most changes being relevant during board editing (see the related sub-chapter for more details). There is no round or time-slice navigation, and the camera manipulation works the same way. The inspectors have slightly different functions: the stone inspector is now an <b>element inspector</b>, displaying information about bases as well; the tracking inspector is now a <b>board dimension inspector</b>; the square inspector remains as is, but does not display info about ante-effects and retro-causes. The inspectors are useful only in editing mode.\r\n</p>\r\n\r\n<p>\r\nIf the board is published, you will see the read-only version of the board interface, with a regular board view and inspectors. The bottom bar is simply a table of the board properties, with the Author username being a clickable link. You may save or block the board from here.\r\n</p>\r\n\r\n<p>\r\nYou can only access the editing mode if the board is not yet published and you are its author. In that case, the bottom bar is replaced with a panel with an element input section and a game management section.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": 21,
    "PARENT_CHAPTER": 2,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 9,
    "LABEL": "Play",
    "CONTENT": "<h3>New game</h3>\r\n\r\n<p>\r\nUsing the <mark>New game</mark> form allows you to start a new game. There are three ways to do this:\r\n</p>\r\n\r\n<ol>\r\n\r\n<li>\r\n<mark>Blind challenge</mark>: without specifying the opponent or the board on which you want to play, only the ruleset you want to use, you create a blind challenge. Any other user who creates a blind or semi-blind challenge with the same ruleset has a chance of being matched with you (and, in fact, your new challenge may be immediately matched on creation if a suitable challenge already exists) and, in case the opponent's challenge was also fully blind, a completely random board is selected for your game. To create a blind challenge, simply chose your preferred ruleset on the first tab of the \"New game\" form and click the button \"Create challenge on random board with random opponent\" at the bottom.\r\n</li>\r\n\r\n<li>\r\n<mark>Semi-blind challenge</mark>: By specifying both the ruleset in tab 1 and the board in tab 2 of the form, you create a semi-blind challenge, which may be matched by any other user's blind or semi-blind challenge which does not specify a different board. When creating a semi-blind challenge you select a board from your board collection, which is managed in the _URLKW2_home.index<section=5,tutorial_guide_chapter=10>_Your boards_ section.\r\n</li>\r\n\r\n<li>\r\n<mark>Targeted challenge</mark>: After specifying the ruleset and the board, the third tab \"Opponent\" becomes visible. Navigating to this tab, you may select one of the users on your friend-list (which may be managed in the _URLKW2_home.index<section=5,tutorial_guide_chapter=13>_Profile_ section). Clicking on the button \"Challenge opponent on selected board\" creates a targeted challenge, which is not waiting to be matched by a suitable counter-challenge, but is displayed in your selected opponent's \"Play\" section as a dialogue box prompting them to accept or decline your challenge.\r\n</li>\r\n\r\n</ol>\r\n\r\n<p>Similarly, targeted challenges your friends create against you will prompt you to accept or decline them in this section in a form \"Challenges for you\" displayed right next to the \"New game\" form.</p>\r\n\r\n<h3>Ongoing games</h3>\r\n\r\n<p>\r\nIn the <mark>Ongoing games</mark> form, you can view the games which are currently in progress, sorted into two tabs depending on whether it is your turn or not; if it is, it means you will be prompted to submit commands and progress the game once you open it. Depending on the time control for the game, this form also shows you how much time you have left to submit your turn.\r\n</p>",
    "NEXT_CHAPTER": 10,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 5,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 10,
    "LABEL": "Your boards",
    "CONTENT": "<p>\r\nYou can create and publish your own boards to play Batil on. To create a new board, press the \"Create new board\" button on the bottom panel of the \"Boards workshop\" tab. This creates a placeholder board called \"New board\" from a simple template, and lists it in your Workshop. Boards in your Workshop may be edited by pressing the \"Edit\" button, which opens the _URLKW2_home.index<section=5,tutorial_guide_chapter=8>_Board interface_ with editing privileges on a new tab.\r\n</p>\r\n\r\n<p>\r\nOnce you're happy with the state of your board, you may publish it. Published boards may not be un-published or deleted, since other players may save them or play games on them! Your published boards are listed in the second tab of the form, \"Public boards\".\r\n<p>\r\n\r\n<p>\r\nPublic boards may be \"forked\", which simply creates a copy of them in your Workshop to edit further. If you choose to \"Hide\" one of your published boards, it will be removed from your collection, but it will not be deleted from the database.\r\n</p>",
    "NEXT_CHAPTER": 11,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 5,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 11,
    "LABEL": "Public boards",
    "CONTENT": "<p>\r\nIn this section you may browse the boards other users have published. Every board may be saved to your collection, which allows you to choose it when creating a semi-blind or a targeted challenge; it may be blacklisted, which means you cannot be randomly assigned this board when creating a new blind challenge; or it may be forked, which allows you to edit its copy in your Workshop.\r\n</p>\r\n\r\n<p>\r\nIn the other two tabs of the form, you may manage your collection of saved boards and your list of blacklisted boards, respectively.\r\n</p>",
    "NEXT_CHAPTER": 12,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 5,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 12,
    "LABEL": "Users",
    "CONTENT": "<p>\r\nThis section is simply a leaderboard of all users of Batil. By using the filter in the User column, you may search for user profiles by their username. You may send friend requests and block people from this form.\r\n</p>",
    "NEXT_CHAPTER": 13,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 5,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 13,
    "LABEL": "Profile",
    "CONTENT": "<p>\r\nThe <mark>Profile</mark> form is divided into the following tabs:\r\n</p>\r\n\r\n<ol>\r\n\r\n<li>\r\n<mark>Personal settings</mark>: This tab allows you to change your profile picture and your password.\r\n</li>\r\n\r\n<li>\r\n<mark>Archive</mark>: This tab features a table of all your concluded games, colour-coded by their outcome from your perspective. You may view the games, the boards they were played on, or the opponents they were played against.\r\n</li>\r\n\r\n<li>\r\n<mark>Friends</mark>: This is the table of users who befriended you. You may send these opponents targeted challenges. Blocking a user automatically removes them from your friend-list. Also note that you may not send a friend request to a user who blocked you.\r\n</li>\r\n\r\n<li>\r\n<mark>Blocked</mark>: This is the table of users that you blocked. This means they may not be assigned as your opponents through blind and semi-blind challenges. You may unblock these users any time you like.\r\n</li>\r\n\r\n</ol>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 5,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 14,
    "LABEL": "Viewing the game",
    "CONTENT": "<p>\r\nThe game interface is available to every user for any specific game; however, unless the game is a) in progress and b) you are one of the players, you will only have viewing privileges. These let you view the state of the game as recorded at the end of every round, navigating the time-slices and using the camera to view the board. You may also select squares and read the information in the three inspectors on the right side of the window. Finally, you may view the board and both players in the _URLKW2_home.index<section=5,tutorial_guide_chapter=8>_board_ and _URLKW2_home.index<section=5,tutorial_guide_chapter=6>_user_ interfaces, respectively.\r\n</p>\r\n\r\n<p>\r\nIf you're an active player of an ongoing game, you may still choose to open and view it without submitting your turn; however, beware the time control rules for this game, which may place a deadline on the submission of your turn.\r\n</p>",
    "NEXT_CHAPTER": 15,
    "FIRST_SUBCHAPTER": 16,
    "PARENT_CHAPTER": 7,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 15,
    "LABEL": "Submitting a new turn",
    "CONTENT": "<p>\r\nIf you're one of the players in an ongoing game, opening the game prompts you to submit your turn if you have at least one causally-free stone in the active time-slice and you have not yet submitted your turn. The stones waiting for your commands are highlighted with a red rhombus outline. Selecting a square with one of these stones displays the available commands in the stone inspector, but <b>only if the active time-slice is displayed</b>: to quickly navigate there, you can press the \"X\" key, or track one of these stones and press the button which skips to their end-point, at which they become causally free.\r\n</p>\r\n\r\n<p>\r\nPressing one of the command buttons in the stone inspector launches <mark>selection mode</mark>, the purpose of which is to confirm the options for this command, which typically consist of choosing a target square on the board, plus potentially an ante-effect to swap or a choice word to select. An example: if you select the \"move\" command, the selection mode simply prompts you to select the square your stone moves to. After all the information required by the selection mode has been inputted, you may submit the command, which changes the rhombus outline colour to green. Selection mode may be abandoned at will, which interrupts the command submission.\r\n</p>\r\n\r\n<p>\r\nOnce all causally free stones get their commands, a button to submit your turn appears in the control panel.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": 19,
    "PARENT_CHAPTER": 7,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 16,
    "LABEL": "Viewing the board",
    "CONTENT": "<p>\r\nThe board consists of a black background, over which the animation layers are overlayed. Manipulating the camera with keyboard actions WASD,QERF allows you to zoom in on a specific part of the board or move around, which is especially helpful if this particular board is quite big.\r\n</p>\r\n\r\n<p>\r\nThe actual board is a grid of squares. You may select a square by clicking on it; the information about the square type and any potential ante-effects, retro-causes, or a stone present on this square will be displayed in their respective inspectors.\r\n</p>\r\n\r\n<p>\r\nWhen navigating between time-slices, an animation is played which smoothly transitions between the states of the board on the initial and final time-slice, showing all events that happen in between. Note that the game may refresh automatically should the state of the game update; in that case, this transition animation plays, bringing the game to the new active time-slice (if a new round begins as well, the initial state will be the first time-slice of the new last round).\r\n</p>",
    "NEXT_CHAPTER": 17,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 14,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 17,
    "LABEL": "Using the inspectors",
    "CONTENT": "<p>\r\nThere are three inspectors which display information about the selected square. Mentions of stones and squares in text displayed here are highlighted, and clicking them displays the selected element instead; clicking on a stone highlight also starts tracking it.\r\n</p>\r\n\r\n<ol>\r\n\r\n<li>\r\n<mark>Stone inspector</mark>: If there's a stone present on the selected square, information about it is displayed in the stone inspector. The highlight in the inspector's title allows you to track this stone, and the start- and end-point highlights allow you to select the respective squares. More importantly, <b>if this stone is causally free in the active time-slice and belongs to your faction, the stone inspector displays the buttons for commanding this stone.</b>\r\n</li>\r\n\r\n<li>\r\n<mark>Tracking inspector</mark>: When a stone is <b>tracked</b>, changing the displayed time-slice re-selects the square this stone lands on. The camera follows the stone always whilst it's displayed on the board, and camera movement is disabled (however, you may still zoom in and out). If the stone is not present on the board in the displayed time-slice, you may move the camera and select squares at will; however, should the tracked stone reappear on the board, the camera position is locked onto it again. The tracking inspector allows you to jump to the tracked stone's start- and end-point, as well as exit tracking (which may also be done by pressing Esc).\r\n</li>\r\n\r\n<li>\r\n<mark>Square inspector</mark>: When a square is selected, this inspector displays the type of the square in its title, and, more importantly, <b>the list of all ante-effects and retro-causes present on this square</b>, categorised by whether they're active in this round.\r\n</li>\r\n\r\n\r\n</ol>",
    "NEXT_CHAPTER": 18,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 14,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 18,
    "LABEL": "Using the action bar",
    "CONTENT": "<p>\r\nThe bar at the bottom of the window hosts several sections, organised left-to-right like so:\r\n</p>\r\n\r\n<ol>\r\n\r\n<li>\r\nThe <mark>control panel</mark>: Allows you to navigate the rounds of the game up to the ongoing one, which you can also jump to; if prompted for turn submission, this section also displays a button to submit your turn after placing a command for every causally-free stone in your faction.\r\n</li>\r\n\r\n<li>\r\nThe <mark>game log</mark>: Displays the selected time-slice and round number, as well as the time-control for an ongoing game which you participate in; if the game is concluded, it displays the outcome instead.\r\n</li>\r\n\r\n<li>\r\nThe <mark>game management</mark>: Displays the usernames of player A and B, as well as the board name; clicking any of these takes you to the relevant User or Board page, respectively. Also displays the ruleset for this game as a list of rule labels.\r\n</li>\r\n\r\n</ol>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 14,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 19,
    "LABEL": "Selection mode: board navigation",
    "CONTENT": "<p>\r\nEvery command requires the selection of a target square. Selection mode disables round navigation, but <b>not time-slice navigation</b>, since for certain commands you can pick from multiple time-slices (e.g. time-jumps). Squares available for selection will be highlighted in green; unavailable stones are highlighted in grey. If there are no green squares displayed, try navigating to different time-slices!\r\n</p>\r\n\r\n<h3>Azimuth selection</h3>\r\n<p>\r\nFor orientable stones, selecting a target board square doesn't automatically place the dummy icon which signifies a successful board square selection, but instead displays four (or fewer) arrows at the edges of the board view (not subject to camera manipulation). Clicking on one of these arrows selects the target azimuth and places the dummy (you may also use the arrow keys, since round navigation is disabled).\r\n</p>\r\n\r\n<h3>Automatic selection</h3>\r\n<p>\r\nIf all the available target squares are in a single time-slice (as is the case for all \"normal\" commands, such as Wait, Turn etc), time-slice navigation is disabled, and that time-slice is automatically displayed. If only a single board square is available, it is automatically selected. If the selected square only has a single azimuth option, that option is automatically selected.\r\n</p>",
    "NEXT_CHAPTER": 20,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 15,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 20,
    "LABEL": "Selection mode: inspectors",
    "CONTENT": "<p>\r\nEvery inspector gains a new functionality while selection mode is active:\r\n</p>\r\n\r\n<ul>\r\n\r\n<li>\r\nStone inspector becomes the <mark>command manager</mark>: allowing you to Submit the selection, or Abort the selection mode, which interrupts the command submission. Note that you can Undo a submitted command by selecting the stone's square in the active time-slice and pressing the Undo button in the stone inspector.\r\n</li>\r\n\r\n<li>\r\nTracking inspector becomes the <mark>choice manager</mark>: certain commands (such as Tagscreen for the tagger) require the selection of an \"option\", e.g. what type of tagscreen should the tagger deploy. The options are displayed here as buttons.\r\n</li>\r\n\r\n<li>\r\nSquare inspector becomes the <mark>swap manager</mark>: time-jumps may allow you to <b>swap</b> an existing time-jump-in for certain available board squares. After selecting the target board square, the swapping options are listed here; clicking on one selects it, and clicking on the \"no swap\" option (which is always selected by default) means a new ante-effect will be created.\r\n</li>\r\n\r\n</ul>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 15,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 21,
    "LABEL": "Editing the board",
    "CONTENT": "<p>\r\nAs an unpublished board's author, you may edit all of its properties. To save the changes you made, you need to press the \"Save board\" button in the game management section, right next to the board name text input.\r\n</p>\r\n\r\n<h3>Adding elements</h3>\r\n<p>\r\nAll the elements you can add to the board (that is, bases and stones of all allegiances and types) are listed by their icons in the element input section. By clicking on an icon you enter selection mode, where selecting one of the available squares (and, for orientable stones, selecting the azimuth) places the stone onto the board; there is no need to click on a Submit button, but you can still abort the selection mode by pressing Esc. Note that placing an element onto a wall square forcibly changes the wall to an empty square.\r\n</p>\r\n\r\n<h3>Managing and removing elements</h3>\r\n<p>\r\nIf you change your mind, you may remove elements from the board or change orientable stones' azimuths by clicking the relevant buttons in the element inspector.\r\n</p>\r\n\r\n<h3>Changing the board dimensions</h3>\r\n<p>\r\nThe default board is 7x5x5 by default, with the convention (time dimension)x(width)x(height). You may change any of these dimensions in the board dimension inspector. After selecting the new dimensions, <b>just pressing \"Save board\" undoes your changes</b>; you must first press the Update button, which appears in the inspector. The reason for this is because changing the spatial dimensions may delete placed elements if they would no longer fit onto the board. The way spatial dimension changes works is like so: the outer rim of the board always consists of walls. Increasing the width/height adds columns/rows of empty squares right before the last column/row, which will always consist of walls. Decreasing the width/height removes the same squares, deleting all elements placed on them. \r\n</p>\r\n\r\n<h3>Changing square types</h3>\r\n<p>\r\nSelecting a square which is not on the outer rim (and therefore not fixed to a wall) shows all the possible types you may change it to in the square inspector. Note that changing a square to a wall deletes all elements placed on it.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 8,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 22,
    "LABEL": "Introduction",
    "CONTENT": "<p>\r\n<i>Batil</i> is a turn-based digital strategy board game about time-travel. So how is it different from <i>5D Chess With Multiverse Time Travel</i>? In <i>5D Chess With Multiverse Time Travel</i>, you cannot \"change the past\" in a way that affects a board configuration which has already been reached--attempting to do so creates a new timeline, which is a neat resolution of the ontological paradox. <i>Batil</i> tackles time-travel in a completely different way, utilising the _URLEXT_<https://en.wikipedia.org/wiki/Novikov_self-consistency_principle>_Novikov self-consistency principle_. A stone may travel back in time, but such an action only occurs if it can be \"justified\" by the player's actions, i.e. any caused effects don't contradict their initial causes. In short, there is a single timeline which hosts an increasing number of tangled world lines, where effect may precede cause, and the growing danger of a paradox looms ever-present.\r\n</p>\r\n\r\n<h3>Setting</h3>\r\n<p>\r\nTwo players, <i>A</i> and <i>B</i>, face each other in a competitive battle over the board. Each player controls an army of stones with diverse specialisations and abilities. Commandeering their stones as time progresses, the players attempt to destroy the opponent's army to clear the way for capturing all the strategically significant points. However, time runs short, and after a few turns, there is nowhere to move anymore. The game, however, continues: the stones can be commanded not just to move in space, but also to jump back in time. These new versions of the old stones share the board space with their previous versions, which follow the established routes already known to the players. However, should a stone travel back in time and obstruct the path of its old self, history becomes malleable. And so the players can control an ever-growing and ever-changing army of many mirror images of a handful of stones, which constantly rewrite their own history. However, be careful not to perform an action which contradicts itself, or you might find yourself trapped in a paradox...\r\n</p>\r\n\r\n<h3>Goal of the game</h3>\r\n<p>\r\nThe board houses a few special squares called bases. Each base has an allegiance: it can belong to either player, or be neutral. Players can capture bases by visiting them with their stones, which changes the base's allegiance to the player's faction until it is captured by their opponent. The goal of the game is to make sure that all the bases on the board belong to you.\r\n</p>",
    "NEXT_CHAPTER": 23,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 3,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 23,
    "LABEL": "How to play",
    "CONTENT": "<p>\r\nThe board consists of squares placed along three axes: horizontal position <i>x</i>, vertical position <i>y</i>, and time <i>t</i>. Time is, of course, special, as the state of the squares at a particular time is directly inferred from the state of the squares at a lower time. The collection of squares at a specified time is called a time-slice, and can be thought of as the temporal equivalent of a rank or a file in classical chess. The dimension of the board along the time axis is called the time cap: the whole game takes place in a time interval of length restricted by this time cap.\r\n</p>\r\n<p>\r\nThe game is played in rounds, where every round consists of a number of turns equal to the time cap. In each round, the players look at the first time-slice in the first turn, then the second time-slice in the second turn etc, until they reach the time cap. In each turn, both players simultaneously place down one command for each stone in the active time-slice. These commands manifest as <b>flags</b>, and after each turn, those flags are translated into actions performed by the stones, which determine the state of the next time-slice. You can think of flags as road-marks which the stones follow along their trajectories.\r\n</p>\r\n<p>\r\nAt the end of each round, a procedure called <b>canonisation</b> is performed, which resolves everything to do with time-travel and sets the stage for the first time-slice of the next round. At this moment, it is also checked if the end-of-game conditions have been satisfied.\r\n</p>\r\n<p>\r\nAn important thing to note is that a flag being placed for a stone at a time-slice <i>t</i> affects the stone \"in-between\" this and the next time-slice, and the consequences of that action showly on in the next time-slice <i>t+1</i>.\r\n</p>\r\n<p>\r\nAn example of what a game could look like in its first round, with instructions on how to navigate and interpret the board can be found in _URLKW_tutorial.tutorial<tutorial_id=1>_this tutorial_.\r\n</p>",
    "NEXT_CHAPTER": 24,
    "FIRST_SUBCHAPTER": 28,
    "PARENT_CHAPTER": 3,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 24,
    "LABEL": "Stone types",
    "CONTENT": "<p>\r\nThere is a multitude of different stone types in the game--which ones are in your army in a given game depends on the board you chose. Each stone type has its own way of moving, attacking, and time-jumping; stone types can be categorised by orientability and opposability. The stone types are as follows:\r\n</p>\r\n<ul>\r\n\r\n<li>\r\n<mark>Tank</mark>\r\n<ul>\r\n<li>\r\nOpposable\r\n</li>\r\n<li>\r\nOrientable\r\n</li>\r\n<li>\r\nMovement: the tank can move forwards or backwards by 1 square and then optionally turn clockwise or anticlockwise by a quarter-revolution. Alternatively, it can stay on its square and turn to any azimuth, or remain as it is.\r\n</li>\r\n<li>\r\nAttacking: the tank attacks by firing in the direction of its azimuth, destroying the first stone in its line of sight, regardless of the stone's faction.\r\n</li>\r\n<li>\r\nTime-jumps: the tank can only time-jump after reaching the final time-slice, jumping back onto the same spatial position and with the same azimuth.\r\n</li>\r\n<li>\r\nSee the _URLKW_tutorial.tutorial<tutorial_id=8>_showcase of the tank's moveset_.\r\n</li>\r\n</ul>\r\n</li>\r\n\r\n<li>\r\n<mark>Bombardier</mark>\r\n<ul>\r\n<li>\r\nOpposable\r\n</li>\r\n<li>\r\nUnorientable\r\n</li>\r\n<li>\r\nMovement: the bombardier can move by 1 square in each of the 4 cardinal directions.\r\n</li>\r\n<li>\r\nAttacking: the bombardier attacks by dropping a bomb onto the same spatial position in any previous time-slice. Being an ante-effect, the consequences of the attack don't unfold until the next round. The bomb destroys any stone on the target square and all of the 4 adjacent squares.\r\n</li>\r\n<li>\r\nTime-jumps: the bombardier can only time-jump after reaching the final time-slice, jumping back onto the same spatial position.\r\n</li>\r\n<li>\r\nSee the _URLKW_tutorial.tutorial<tutorial_id=9>_showcase of the bombardier's moveset_.\r\n</li>\r\n</ul>\r\n</li>\r\n\r\n<li>\r\n<mark>Sniper</mark>\r\n<ul>\r\n<li>\r\nOpposable\r\n</li>\r\n<li>\r\nUnorientable\r\n</li>\r\n<li>\r\nMovement: the sniper cannot move on its own, and relies on being pushed by other opposable stones. However, it can turn to any azimuth or remain as it is.\r\n</li>\r\n<li>\r\nAttacking: the sniper attacks by firing in the direction of its azimuth, destroying the first stone in its line of sight except for stones in the same faction. Stones in the same faction are ignored and the attack can hit even stones obscured behind them.\r\n</li>\r\n<li>\r\nTime-jumps: the sniper can time-jump from any time-slice into any previous time-slice onto the same spatial position and with the same azimuth.\r\n</li>\r\n<li>\r\nSee the _URLKW_tutorial.tutorial<tutorial_id=10>_showcase of the sniper's moveset_.\r\n</li>\r\n</ul>\r\n</li>\r\n\r\n<li>\r\n<mark>Tagger</mark>\r\n<ul>\r\n<li>\r\nUnopposable\r\n</li>\r\n<li>\r\nUnorientable\r\n</li>\r\n<li>\r\nMovement: the tagger jumps like a horse (two squares in any cardinal direction and one square in a perpendicular direction). Being unopposable, it naturally jumps over other stones.\r\n</li>\r\n<li>\r\nAttacking: the tagger deploys a tagscreen at its position, tagging any stone on its square and all of the 4 adjacent squares. There are multiple different tagscreen types the player can choose from:\r\n<ul>\r\n<li>\r\n\"Lock\" tagscreen: The tagged stones lose their ability to time-jump-out and become causally locked in the final time-slice. However, this does not disrupt time-jumps-out already placed on the tagged stones' trajectories, only prevents the players for queueing new ones.\r\n</li>\r\n<li>\r\n\"Unlock\" tagscreen: counteracts the \"lock\" tagscreen, or interferes with trajectories laid out on previous rounds, making stones causally free. See Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=25>_Ruleset variations_ for details.\r\n</li>\r\n<li>\r\n\"Hide\" tagscreen: Removes all tagged stones from the board and places them into the next time-slice. Cannot be deployed on the second-to-last time-slice. Note that this saves stones from enemy fire, but not from explosions of pyrotechnic entities, such as mines or a moving wildcard.\r\n</li>\r\n</ul>\r\n</li>\r\n<li>\r\nTime-jumps: the tagger can time-jump at any time--either by one time-slice back and by one square in any cardinal direction, or into the same time-slice and by two squares in any cardinal direction.\r\n</li>\r\n<li>\r\nSee the _URLKW_tutorial.tutorial<tutorial_id=11>_showcase of the tagger's moveset_.\r\n</li>\r\n</ul>\r\n</li>\r\n\r\n<li>\r\n<mark>Wildcard</mark>\r\n<ul>\r\n<li>\r\nUnopposable\r\n</li>\r\n<li>\r\nUnorientable\r\n</li>\r\n<li>\r\nMovement: the wildcard jumps onto the neighbouring square in any of the 4 diagonal directions.\r\n</li>\r\n<li>\r\nAttacking: the wildcard attacks on movement, creating a capture during spatial conflict resolution. Two or more wildcards can capture each other, destroying all stones present. The wildcard does not capture a stone which jumps onto its square if waiting.\r\n</li>\r\n<li>\r\nTime-jumps: the wildcard can time-jump at any time. A special property of the wildcard is that it can swap the time-jump of any stone type (and is not limited by the azimuth if changing into an orientable stone). For more details on swapping, see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=36>_Swapping_.\r\n</li>\r\n<li>\r\nThe wildcard cannot capture bases.\r\n</li>\r\n</ul>\r\n</li>\r\n\r\n\r\n</ul>",
    "NEXT_CHAPTER": 25,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 3,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 25,
    "LABEL": "Ruleset variations",
    "CONTENT": "Change me",
    "NEXT_CHAPTER": 26,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 3,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 26,
    "LABEL": "Index of tutorials",
    "CONTENT": "<h3>Basics of Batil</h3>\r\n_URLKW_tutorial.tutorial<tutorial_id=1>_1. Introduction_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=2>_2. Causal freedom and the comb rule_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=3>_3. Interference and amnesia_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=4>_4. Spatial conflict resolution_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=5>_5. Canonisation and swapping_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=6>_6. Canonisation and the rule of dogma_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=7>_7. Capturing bases and winning the game_\r\n\r\n<h3>Stone type movesets</h3>\r\n_URLKW_tutorial.tutorial<tutorial_id=8>_Tank_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=9>_Bombardier_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=10>_Sniper_\r\n<br>\r\n_URLKW_tutorial.tutorial<tutorial_id=11>_Tagger_",
    "NEXT_CHAPTER": 27,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 3,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 27,
    "LABEL": "Glossary of terms",
    "CONTENT": "Change me",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 3,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 28,
    "LABEL": "Stone trajectories and flag placement",
    "CONTENT": "<p>\r\nEvery stone placed on the board has a unique flag called the <b>progenitor</b> which, if active, places it onto a specific position. From the corresponding time onward, the stone checks the square it stands on in each time-slice for flags which can be activated (see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=30>_Interference and amnesia_ for specific rules about which flag is activated). Activating a flag determines the stone's initial placement in the next time-slice, and after all flags in this time-slice are dealt with, this initial placement is changed into the canonical placement by resolving all conflicts (see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=33>_Spatial conflict resolution_). If the stone follows a flag which removes it from a board, is destroyed, or becomes causally free, it is not placed into the next time-slice, and its trajectory ends.\r\n</p>\r\n<p>\r\nIt is important to note that the game is totally deterministic. In other words, specifying the flags players placed on each turn up to turn <i>T</i> allows us to unequivocally ascertain the state of the board on turn <i>1</i>, turn <i>2...</i> all the way to turn <i>T</i>.\r\n</p>",
    "NEXT_CHAPTER": 32,
    "FIRST_SUBCHAPTER": 29,
    "PARENT_CHAPTER": 23,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 29,
    "LABEL": "Causal freedom and the comb rule",
    "CONTENT": "<p>\r\nIf a stone reaches a position at which there is no flag which it can follow, the stone becomes <b>causally free</b>. This means that we don't know what the stone does between this and the next time-slice, and so it isn't yet placed in the next time-slice. However, when a flag is placed for this stone at the point of its causal freedom, it gets \"locked\" into the specified action and can be placed into the next time-slice, where (if not destroyed) it is causally free and can be commanded again.\r\n</p>\r\n<p>\r\nNow we understand the structure of the game as divided into rounds and turns: the turns progress through every time-slice \"sweeping up\" causally free stones, propagating their trajectories to the point of removal from the board or the time cap. Then, when the end of the round is reached, any progenitor flag, including the newly placed time-jumps, can be set as active, which in turn creates new causally free stones sprinkled over the board, and a new round of \"sweeping\" may begin again.\r\n<p>\r\n</p>\r\nThe <b>comb rule</b> states that within a round, the past is always known. In other words, in a turn where time-slice <i>t</i> is active, there cannot be any causally free stones in time-slices <i>1, 2... t-1</i>. This mean that the players have to command <i>all</i> of their causally free stones at <i>t</i>, with the only exception to this being the final time-slice of the round, where stones are allowed to be left as causally free, since there is no later time at which their past would have to be known.\r\n</p>\r\n<p>\r\n_URLKW_tutorial.tutorial<tutorial_id=2>_This tutorial_ shows the state of an example game after the second round starts; in the first round, no stone may remain causally free except for in the final time-slice, but in the last round, which is in progress, causally free stones may turn up in any time-slice which is later than the active one.\r\n</p>",
    "NEXT_CHAPTER": 30,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 28,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 30,
    "LABEL": "Interference and amnesia",
    "CONTENT": "<h3>Interference</h3>\r\n<p>\r\nAn important term to be familiar with is <b>interference</b>. The philosophy the game follows is that trajectories once laid out will play out again and again, unless their actors are interacted with by stones sharing the same time, but still remaining causally free due to being placed into the same time later in the game. If a stone which would not normally become causally free in a specific time-slice has its path obstructed or is in another way prevented from reaching the next flag leading it along its trajectory, that stone once again becomes causally free in that time-slice. In short, the more interference the players can cause among their stones, the more control over them they can gain.\r\n</p>\r\n\r\n<h3>Preventing amnesia</h3>\r\n<p>\r\n<b>Amnesia</b> does not exist in the world of Batil. This is why <b>amnesia prevention</b> is an important mechanic in the game. Suppose that a certain stone follows a trajectory carved out in some early round. In a later round, this stone is interfered with, and follows a different trajectory. And now suppose that, in this new trajectory, the stone enters a square which it would occupy in the earlier trajectory as well, the same time and the same position. Should the stone \"forget\" the interference and slip back into the old trajectory? No! This is why the presence of a flag associated with the stone is a necessary, but not sufficient condition for the stone to actually follow the flag. In fact, the stone cannot follow a flag placed in an earlier round than that of the flag it followed in the previous time-slice; this ensures that a stone set causally free by interference remains causally free in the active time-slice until the end of the round.\r\n</p>\r\n<p>\r\nBoth of these concepts are demonstrated in _URLKW_tutorial.tutorial<tutorial_id=3>_this tutorial_.\r\n</p>",
    "NEXT_CHAPTER": 31,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 28,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 31,
    "LABEL": "Order of flag execution",
    "CONTENT": "<p>\r\nOnce all flags have been placed for this turn, the game calculates the state of the board for the next turn. It does this by going from the first to the last time-slice, always taking the flags in the previous time-slice to determine the state of this time-slice. This process can be broken down into four parts:\r\n</p>\r\n<ol>\r\n<li>\r\nThe movement flags placed on the previous time-slice and progenitor flags associated with this time-slice are executed, propagating the stones into this time-slice, in general into conflicting positions.\r\n</li>\r\n<li>\r\nThe spatial conflicts are resolved, and the state of this time-slice is conflict-free.\r\n</li>\r\n<li>\r\nThe stone actions activated in the previous time-slice, such as attacks, and board events such as explosions of bombs and tagscreens, are resolved now. Since these can only remove stones from the board, but not push them, the time-slice remains without conflict.\r\n</li>\r\n<li>\r\nFinally, the allegiance of each base changes to the faction of the occupying stone, if there is one. The time-slice state is now canonical.\r\n</li>\r\n</ol>\r\n<p>\r\nNote that, within each turn, there is no order imposed upon the players--rather, all of the commands they submitted are performed simultaneously! An important part of the game is also that players choose their actions in a given turn without seeing what the other player is considering to do, only learning of each other's actions after the turn ends.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 28,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 32,
    "LABEL": "Spatial movement and attacking",
    "CONTENT": "<p>\r\nThe simplest action a stone typically performs is moving spatially. Different stone types move in different ways, which are described in Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=24>_Stone types_. Each stone type has two parameters which partially describe its interaction with other stones and its control scheme with regard to spatial movement:\r\n</p>\r\n<ul>\r\n<li>\r\n<b>Orientability</b>: If a stone is orientable, it is described not only by its spatial position, but also the direction it is facing, referred to as its \"azimuth\". Typically, the azimuth of a stone is one of the four cardinal directions. The azimuth of an orientable stone determines the direction of its movement and attacks.\r\n</li>\r\n<li>\r\n<b>Opposability</b>: The full extent of this property is described in Sec. \\ref{sec:spatial conflict resolution}, but to put it simply, <b>unopposable</b> stones jump over other stones when moving, while <b>opposable</b> stones push other stones along the direction of their movement.\r\n</li>\r\n</ul>\r\n<p>\r\nThe most important rule of movement in Batil is: two stones cannot occupy the same square! If two stones do end up on the same square after the placed commands are executed, the game rearranges their positions following a process called _URLKW2_home.index<section=5,tutorial_guide_chapter=33>_spatial conflict resolution_ until the time-slice is conflict-free. A <b>conflict</b> is an occurrence on the board where either a stone occupies an unavailable square, such as a wall, or two or more stones occupy the same square. The game prevents conflicts in two ways:\r\n</p>\r\n<ul>\r\n<li>\r\n\"Soft\" prevention: the player will not be allowed to place down a flag which would command their stone into a permanent, static obstacle (i.e. an unavailable square).\r\n</li>\r\n<li>\r\n\"Hard\" prevention: after all movement commands are executed, spatial conflict resolution assures the next time-slice to be conflict-free.\r\n</li>\r\n</ul>\r\n<p>\r\nThe final thing to keep in mind about spatial movement in general is that it's also technically a form of time-jumping: to move spatially, the stone has to move <i>forward</i> by one time-slice. This is why it is impossible to move spatially in the final time-slice. The selection mode options reflect this: all available squares will be in the time-slice right after the active one.\r\n</p>",
    "NEXT_CHAPTER": 34,
    "FIRST_SUBCHAPTER": 33,
    "PARENT_CHAPTER": 23,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 33,
    "LABEL": "Spatial conflict resolution",
    "CONTENT": "<p>\r\nSpatial conflict resolution takes the state of a time-slice immediately after all the flags in the previous time-slice are executed, propagating stones onto this one, and makes it so that this state obeys all the usual rules (most importantly, two stones cannot share the same square). In a sense, it represents the physicality of the stones. Even though the routine may revert the spatial movement of a stone, note that if the stone also changed its azimuth, this azimuth change does not revert.\r\n</p>\r\n<p>\r\nSpatial conflict resolution is done by following a series of processes, each one more intrusive than the ones before, until the board is conflict-free. The processes are listed here, and, for completeness, this section also lists all the special considerations for different stone types in their proper place between the general procedures.\r\n</p>\r\n<ol>\r\n\r\n<li>\r\n<mark>Sokoban push</mark>: For every square occupied by exactly two stones, if one of these stones occupied the same square in the previous time-slice, it will be pushed in the direction of the other stone's approach. This will not occur if\r\n<ul>\r\n<li>\r\nthe other stone did not move onto this square from the previous time-slice spatially, but rather was placed here by a progenitor flag, e.g. through a time-jump-in, or\r\n</li>\r\n<li>\r\nthe square onto which the stone would be pushed is unavailable or occupied (much like in Sokoban, one cannot push two stones with one move), or\r\n</li>\r\n<li>\r\nthe other stone is not opposable.\r\n</li>\r\n</ul>\r\n</li>\r\n\r\n<li>\r\n<mark>Opposition</mark>: For every opposable stone, if it moved from position A to position B and there exists another opposable stone which moved from position B to position A, both stones are returned to their original position. Tanks, for example, cannot jump over one another.\r\n<ol type=\"a\">\r\n<li>\r\n<mark>Capture</mark>: Captures are a special type of movement-based attack which destroys all other stones on the square of placement. They are resolved after impasse, but squares occupied by capturing stones are not subject to impasse, and therefore we note down all squares where captures will happen immediately after resolving opposition.\r\n</li>\r\n</ol>\r\n</li>\r\n\r\n<li>\r\n<mark>Impasse</mark>: Now, for every square occupied by more than one stone (and no captures present), all the stones on this square which have <i>not</i> been placed on the board in this time-slice (i.e. they are present in the previous time-slice) are moved back to the square which they occupied in the previous time-slice, as well as the stones they pushed through the <b>Sokoban push</b> rule. This rule chains, and is applied repeatedly until all stones which are still placed on squares which are occupied by more than one stone have already been moved by this rule.\r\n<ol type=\"a\">\r\n<li>\r\n<mark>Capture resolution</mark>: At this point, all captures are resolved. The reason why wait until after impasse is that during impasse, more stones may be pushed back onto squares where captures will happen. If a stone performs a capture, all the other stone sharing its square are destroyed; if two or more stones perform a capture on the same square, all stones present will be destroyed. Certain stones (such as mines) perform capture in a way that destroys themselves automatically.\r\n</li>\r\n</ol>\r\n</li>\r\n\r\n<li>\r\n<mark>Explosion</mark>: Finally, for every square occupied by more than one stone, all stones on this square are removed from the board.\r\n</li>\r\n\r\n</ol>\r\n\r\n<p>\r\nSpecific examples for how each of these procedures manifests, including the special capture rules for stones such as the wildcard or the mine, can be found in _URLKW_tutorial.tutorial<tutorial_id=4>_this tutorial_.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 32,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 34,
    "LABEL": "Interacting with the past",
    "CONTENT": "<p>\r\nThe heart of Batil is time travel. The players are able to perform actions which define a cause and an effect, with the effect happening in an earlier time-slice than the cause. For such an arrangement, we shall use the terms <b>ante-effect</b> and <b>retro-cause</b>.\r\n</p>\r\n<p>\r\nNaturally, the players cannot <i>affect</i> the state of the board in the previous turns or round, only <i>effect</i> the state of the board in the next turn, which may happen to correspond to an earlier time. This is the heart of the comb rule and why the game is divided into rounds: a <b>round</b> is an interval of assumed consistency, where the game allows players to time-travel as they please, and at the end of each round, <b>canonisation</b> occurs, which ensures the state of the board at the beginning of the next round is \"sensible\", i.e. causally consistent (see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=35>_Canonisation_).\r\n</p>\r\n<h3>Time-jumps and other interactions with the past</h3>\r\n<p>\r\nThe most common way to interact with the past is to take a stone and jump with it to an earlier time-slice. This action is split into two parts: a <b>time-jump-out</b>, which is an action of the old version of the stone, taking it off of the board; and a <b>time-jump-in</b>, a progenitor flag which places the new version of the stone onto the board.\r\n</p>\r\n<p>\r\nDifferent stone types can perform time-jumps under different conditions and in different ways which are outlined in Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=24>_Stone types_. Most importantly, certain stone types are only able to perform a time-jump after reaching the final time-slice of the round, which prevents them from using time-jumps as an easy evasive manoeuver.\r\n</p>\r\n<p>\r\nOther ways of interacting with the past are specific to different stone types, and may entail placing bombs at or other forms of attacking a square in a past time-slice. For an exhaustive list, see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=24>_Stone types_.\r\n</p>",
    "NEXT_CHAPTER": 38,
    "FIRST_SUBCHAPTER": 35,
    "PARENT_CHAPTER": 23,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 35,
    "LABEL": "Canonisation",
    "CONTENT": "<p>\r\nCanonisation occurs between every two consecutive rounds. During canonisation, all ante-effects are subject to being activated or deactivated. For each round, the configuration which determines for each ante-effect placed in all <i>previous</i> rounds whether it is active or passive is called a <b>scenario</b>. Canonisation is then, in short, the process of selecting a specific scenario.\r\n</p>\r\n<p>\r\nFor a scenario to be selected, it has to be <b>causally consistent</b>. This means that for every active effect there exists a cause, and every cause has an active effect. Note that for a cause to count, the corresponding flag must be reached and executed by its stone.\r\n</p>\r\n<p>\r\nWhen canonising a round, the game may find one, multiple, or no causally consistent scenarios (for examples see _URLKW_tutorial.tutorial<tutorial_id=6>_tutorial_). If there exists at least one causally consistent scenario, all candidates are ordered by priority according to specific criteria and the top priority candidate is selected. These criteria can be selected by the players before starting the game, and are further discussed in Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=25>_Ruleset variations_. If no causally consistent scenarios exist, a paradox is reached. Once again, based on the rules agreed upon by the players, the game may either terminate, or (as per more common rules) attempt to force a causally consistent scenario by deactivating not only player-placed ante-effects, but also the placement of stones on setup. Therefore, a scenario in general entails not only the activity of ante-effects, but also the setup of the first time-slice used for that specific round.\r\n</p>\r\n<p>\r\nFor examples of canonisation, see _URLKW_tutorial.tutorial<tutorial_id=5>_this_ (also explains swapping) and _URLKW_tutorial.tutorial<tutorial_id=6>_this_ (also explains the rule of dogma) tutorial.\r\n</p>\r\n<h3>The canonised and the pre-canonised round</h3>\r\n<p>\r\nAs discussed above, after round <i>R</i> finishes (that is, both players submit their turns for the final time-slice), a scenario is calculated, which is applied to the existing ante-effects and retro-causes for round <i>R+1</i>, whose first time-slice is presumably the active time-slice now. However, this scenario does not make round <i>R+1</i> causally consistent: it is impossible to make round <i>R+1</i> causally consistent before we know what the players do in this round! This scenario makes round <i>R</i> causally consistent. This is why applying this scenario to round <i>R+1</i> makes the round <b>pre-canonised</b>; if we applied the same scenario to round <i>R</i>, that round would be <b>canonised</b>.\r\n</p>\r\n<p>\r\nThis is a very important distinction, because it affects what the player sees when opening the game. The active round is displayed in its pre-canonised state, since we still wait for turns to be submitted for it. However, all the previous rounds are displayed in their canonised state. This means that when you finish a round by submitting your turn for its final time-slice, revisiting that round in the game interface may show completely different behaviour, since a different scenario is applied to it now.\r\n</p>\r\n<p>\r\nWhy is it done in this way? Showing the finished round's canonised form is simply more useful, since this is the form on which the end-of-game conditions are tested. All ante-effects and retro-causes may still be viewed in the square inspector, so no information is lost.\r\n</p>\r\n<p>\r\n<i>Note</i>: One finer detail was omitted in this explanation. In fact, the scenario calculated to find the pre-canonised round <i>R+1</i> is slightly different from the scenario used to find the canonised round <i>R</i>: this subtle difference is discussed in Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=37>_Rule of dogma_.\r\n</p>",
    "NEXT_CHAPTER": 36,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 34,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 36,
    "LABEL": "Swapping",
    "CONTENT": "<p>\r\nEvery retro-cause points at one specific ante-effect. However, there isn't a one-to-one relationship, and one ante-effect can admit multiple retro-causes. To <b>swap</b> an ante-effect simply means to add a new retro-cause which links to it, allowing it to be set as active in the next round's scenario in case the swapped retro-cause can activate, too.\r\n</p>\r\n<p>\r\nNote that swapping is not mandatory, and a stone which wishes to create a retro-cause linking to an ante-effect on a square which already has an existing ante-effect can choose to create a new ante-effect, for example if the old one will become deactivated anyway. In this sense, swapping is only useful for preserving progenitor ante-effects (namely time-jumps), so that their deactivation doesn't destroy the continuation of a long world-line which passes through them.\r\n</p>\r\n<p>\r\nSwapping a time-jump-in requires certain conditions to be met. The stones activating the time-jump-in and time-jump-out have to belong to the same faction, be of the same stone-type, and of equal azimuth if orientable. The exception to the latter two conditions is the wildcard, a stone type which can \"become\" a different stone type by swapping its time-jump-in.\r\n</p>\r\n<p>\r\nTo see an example of swapping, see _URLKW_tutorial.tutorial<tutorial_id=5>_this tutorial_.\r\n</p>",
    "NEXT_CHAPTER": 37,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 34,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 37,
    "LABEL": "Rule of dogma",
    "CONTENT": "<p><i>All ante-effects placed in this round are dogmatic in the next round.</i></p>\r\n<p>\r\nSometimes, placing an ante-effect would result in a paradox or at least its immediate deactivation for the next round. However, if the player gets a bit more leeway, they may be able to justify the ante-effect by swapping it later, or counter-acting the problems it causes with interference. For this reason, Batil makes all ante-effects placed in round <i>R</i> automatically active in round <i>R+1</i>. This is an important adjustment to canonisation: during canonisation, the game actually ignores ante-effects placed in this round, only finding a causally consistent scenario for ante-effects placed in all previous rounds (but still taking into account other commands placed in this round, including the newly-placed retro-causes). Then, taking the found scenario, conditions for ending the game are checked, and, if not met, all ante-effects added this round are added to the found scenario as active, and the result is the pre-canonical scenario for the next round. Ante-effects automatically set as active in this way are called dogmatic.\r\n</p>\r\n<p>\r\nImportantly, ante-effects placed in this round cannot be swapped, as that would always result in a paradox. This assures a one-to-one correspondence between ante-effects placed in this round and their retro-causes.\r\n</p>\r\n<h3>Difference between the canonised and pre-canonised round</h3>\r\n<p>\r\nNaturally, since a round's dogmatic ante-effects are not considered when finding the self-consistent scenario, their inclusion among the active ante-effects may break self-consistency--this is called <b>dogmatic inconsistency</b>. Dogmatic inconsistency makes sense to be found in the next round's pre-canonised state, as it gives the players leeway to add any kind of time-jump and explore its consequences, however, it shouldn't be considered when looking at the canonised state of <i>this</i> round--and it isn't. This is why dogmatic ante-effects do not appear in their round's canonised state. This means even though this round's canonised state and next round's pre-canonised state use <i>almost</i> the same scenario, there is actually a difference: dogmatic ante-effects are omitted in this round's canonised form, and included in the next round's pre-canonised form.\r\n</p>\r\n<h3>Surfing on dogmatic inconsistency</h3>\r\n<p>\r\nA stone may keep propagating through the progressing rounds by always adding a progenitor ante-effect, i.e. a time-jump-in, even though each iteration's existence is expunged from the canonised versions of each round due to being inconsistent. Such stones are said to be <b>surfing</b>. Even though their presence isn't considered in the canonised rounds, and thus cannot contribute directly to capturing bases and such end-of-game conditions, they may influence the evolution of the game in more insidious ways--and they may end up becoming self-consistent with a clever swap or interference.\r\n</p>\r\n<p>\r\nFor examples of surfing and other effects of the rule of dogma, see _URLKW_tutorial.tutorial<tutorial_id=6>_this tutorial_.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 34,
    "VIEWER": "tutorial_guide"
  },
  {
    "CHAPTER_ID": 38,
    "LABEL": "End of the game",
    "CONTENT": "<p>\r\nAfter a round concludes, before the next round's pre-canonised state is initialised, the game checks this round's now canonised version for end-of-game conditions. There are two classes of game-over conditions: win conditions, which immediately yield the victory to one of the players, and the neutral conditions, which either result in the game counting as a draw, or determining the victor in a different way (see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=25>_Ruleset variations_ for details).\r\n</p>\r\n<p>\r\nIn the standard game, there is only one win condition: in the canonised round, if all bases in the final time-slice belong to a single player, that player wins the game. As mentioned previously, each <b>base</b> corresponds to a stationary spatial position, and the way to conquer it is to visit that position with a stone in one's faction. To be more precise, if a base square is, after spatial conflict resolution, occupied by a stone belonging to a specific player, the base belongs to that player in that and every subsequent time-slice, until it is conquered by another player. Note that if a neutral stone (such as a box or a mine) visits the base, the allegiance of the base doesn't revert to neutral, but remains as before, since a neutral stone doesn't belong to a specific player.\r\n<p>\r\n</p>\t\r\nThe win condition can be rephrased as: if the last visitor to every base square is a stone belonging to one and the same player, that player wins the game.\r\n</p>\r\n<p>\r\nAs for the condition for the neutral game ending, it is fairly simple: If an entire round progresses without either of the players placing a single new command, the game ends. This is equivalent to there being no causally free stones in any time-slice of the pre-canonised state of the next round. If not stopped, the game would then simply keep adding more and more identical rounds, and thus is technically a draw by repetition <i>and</i> stalemate at the same time.\r\n</p>\r\n<p>\r\nKeep in mind that the neutral game ending does not necessarily mean the game counts as a draw: see Sec. _URLKW2_home.index<section=5,tutorial_guide_chapter=25>_Ruleset variations_.\r\n</p>\r\n<h3>Player-agreed game-over and time-out</h3>\r\n<p>\r\nThe players may conclude the game earlier than it naturally would by agreeing on a draw. This circumvents any potential calculation of the game outcome on a neutral ending--the game is a draw. Furthermore, each player may resign the game at any moment, immediately concluding the game with their opponent victorious.\r\n</p>\r\n<p>\r\nDepending on the time-control chosen in the ruleset when starting the game, a player may lose on a time-out by running out of time. Should both players lose on time-out simultaneously (which, given the nature of simultaneous turn submission, is entirely possible), the game counts as a draw.\r\n</p>\r\n<p>\r\nYou can see a demonstration of the rules for capturing bases and how the game checks whether a player wins in _URLKW_tutorial.tutorial<tutorial_id=7>_this tutorial_.\r\n</p>",
    "NEXT_CHAPTER": null,
    "FIRST_SUBCHAPTER": null,
    "PARENT_CHAPTER": 23,
    "VIEWER": "tutorial_guide"
  }
]